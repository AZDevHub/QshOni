             PGM        PARM(&IFSFILE &SIZEDEC &ALLOCDEC &ESCONERROR)

             DCL        VAR(&ESCONERROR) TYPE(*CHAR) LEN(4)
             DCL        VAR(&IFSFILE) TYPE(*CHAR) LEN(256)
             DCL        VAR(&IFSFILE2) TYPE(*CHAR) LEN(256)
             DCL        VAR(&RTNVALBIN) TYPE(*CHAR) LEN(4)
             DCL        VAR(&RTNVALDEC) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&RECEIVER) TYPE(*CHAR) LEN(4096)
             DCL        VAR(&NULL) TYPE(*CHAR) LEN(1) VALUE(X'00')
             DCL        VAR(&SIZEBIN) TYPE(*CHAR) LEN(4)
             DCL        VAR(&SIZEDEC) TYPE(*DEC) LEN(15 0)
             DCL        VAR(&ALLOCBIN) TYPE(*CHAR) LEN(4)
             DCL        VAR(&ALLOCDEC) TYPE(*DEC) LEN(15 0)

             MONMSG     MSGID(CPF0000) EXEC(GOTO CMDLBL(ERRORS))

             CHGVAR     VAR(&SIZEDEC) VALUE(0)
             CHGVAR     VAR(&ALLOCDEC) VALUE(0)

             CHGVAR     VAR(&IFSFILE2) VALUE(&IFSFILE *TCAT &NULL)

             CALLPRC    PRC('stat') PARM((&IFSFILE2) (&RECEIVER)) +
                          RTNVAL(%BIN(&RTNVALBIN))

             CHGVAR     VAR(&RTNVALDEC) VALUE(%BIN(&RTNVALBIN))

             /* If errors occurred */
             IF         COND(&RTNVALDEC *NE 0) THEN(DO)

             IF         COND(&ESCONERROR *EQ *YES) THEN(DO)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('IFS +
                          object ' |> &IFSFILE |< ' not found') +
                          MSGTYPE(*ESCAPE)
             ENDDO

             /* Exit gracefully if not sending escape message. */
             /* We will just return a negative number on error.*/
             IF         COND(&ESCONERROR *NE *YES) THEN(DO)
             /* Set negative return code on errors and rtn diag msg */
             CHGVAR     VAR(&SIZEDEC) VALUE(-2)
             CHGVAR     VAR(&ALLOCDEC) VALUE(-2)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('IFS +
                          object ' |> &IFSFILE |< ' not found') +
                          MSGTYPE(*DIAG)
             RETURN
             ENDDO

             ENDDO      /* ENDDO when &RTNVALDEC <> 0 */

             /* Send diagnostic info to the joblog */
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('IFS +
                          file' |> &IFSFILE |> 'info:') TOPGMQ(*PRV) +
                          MSGTYPE(*INFO)

             /* Write file size to joblog */
             CHGVAR     VAR(&SIZEBIN) VALUE(%SST(&RECEIVER 21 4))
             CHGVAR     VAR(&SIZEDEC) VALUE(%BIN(&SIZEBIN))
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('The +
                          number of data bytes in the file is' |> +
                          %CHAR(&SIZEDEC)) TOPGMQ(*PRV) MSGTYPE(*INFO)

             /* Write allocated file size to joblog */
             CHGVAR     VAR(&ALLOCBIN) VALUE(%SST(&RECEIVER 45 4))
             CHGVAR     VAR(&ALLOCDEC) VALUE(%BIN(&ALLOCBIN))
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('The +
                          number of bytes allocated to the file is +
                          ' |> %CHAR(&ALLOCDEC)) TOPGMQ(*PRV) +
                          MSGTYPE(*INFO)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('IFS +
                          file' |> &IFSFILE |> 'size info retrieved +
                          successfully') TOPGMQ(*PRV) MSGTYPE(*COMP)

             RETURN

ERRORS:
             /* Set negative return code on errors and rtn diag msg */
             CHGVAR     VAR(&SIZEDEC) VALUE(-2)
             CHGVAR     VAR(&ALLOCDEC) VALUE(-2)

             IF         COND(&ESCONERROR *EQ *YES) THEN(DO)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('Error +
                          checking IFS file size for' |> &IFSFILE) +
                          TOPGMQ(*PRV) MSGTYPE(*ESCAPE)
             ENDDO
             IF         COND(&ESCONERROR *NE *YES) THEN(DO)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('Error +
                          checking IFS file size for' |> &IFSFILE) +
                          TOPGMQ(*PRV) MSGTYPE(*DIAG)
             ENDDO

             ENDPGM
